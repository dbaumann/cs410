// This file is part of the materials accompanying the book 
// "The Elements of Computing Systems" by Nisan and Schocken, 
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: projects/05/CPU.hdl

/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and 
 * execute instructions written in the Hack machine language.
 * In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM=0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time unit. If reset=1 then the 
 * CPU jumps to address 0 (i.e. sets pc=0 in next time unit) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    PC(in=aOut, load=loadPC, inc=true, reset=reset, out[0..14]=pc); //component

    Not(in=instruction[15], out=isAinstruction); //control
    Or(a=instruction[5], b=isAinstruction, out=loadA); //control
    ARegister(in=aIn, load=loadA, out=aOut, out[0..14]=addressM); //component

    Mux16(a=instruction, b=aluOut, sel=instruction[15], out=aIn); //component

    ALU(x=dOut, y=AorM,
        zx=instruction[11], nx=instruction[10],
        zy=instruction[9], ny=instruction[8],
        f=instruction[7], no=instruction[6],
        out=aluOut, out=outM,
        zr=aluZero, ng=aluNegative); //component

    And(a=instruction[4], b=instruction[15], out=loadD); //control
    DRegister(in=aluOut, load=loadD, out=dOut); //component

    Mux16(a=aOut, b=inM, sel=instruction[12], out=AorM); //component

    And(a=instruction[15], b=instruction[3], out=writeM); //control


    //jump logic
    Not(in=aluZero, out=aluNonzero);
    Not(in=aluNegative, out=aluNonnegative);
    And(a=aluNonzero, b=aluNonnegative, out=aluPositive);
    Not(in=aluPositive, out=aluNonpositive);

    Mux8Way16(a=false,
              b[0]=aluPositive, b[1..15]=false,
              c[0]=aluZero, c[1..15]=false,
              d[0]=aluNonnegative, d[1..15]=false,
              e[0]=aluNegative, e[1..15]=false,
              f[0]=aluNonzero, f[1..15]=false,
              g[0]=aluNonpositive, g[1..15]=false,
              h=true,
              sel=instruction[0..2],
              out[0]=jumpRequested);

    And(a=jumpRequested, b=instruction[15], out=loadPC);
}
