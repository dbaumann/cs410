class Game {
  field int MIN_DELAY;

  field int gameSpeed, randomSeed;

  field Player human;
  field Player computer;
  
  field int loser, timer;

  constructor Game new(int newSpeed, int newRandomSeed) {
    let MIN_DELAY = 5000;
    let gameSpeed = newSpeed * 150;
    let randomSeed = newRandomSeed;

    //create players (newXPos, newYPos, newDirection, newSpeed, newPlayerId)
    let human = Player.new(256, 18, 2, 1, 0);
    let computer = Player.new(256, 253, 0, 2, randomSeed);

    //initialize game screen
    do Screen.setColor(true);
    do Screen.drawRectangle(0, 15, 511, 18); //top edge
    do Screen.drawRectangle(509, 15, 511, 255); //right edge
    do Screen.drawRectangle(0, 253, 511, 255); //bottom edge
    do Screen.drawRectangle(0, 15, 2, 255); //left edge

    do Output.moveCursor(0, 0);
    do Output.printString("Change direction with arrow keys. Pause with P.");

    let loser = 0;
    let timer = 0;

    return this;
  }

  method void advance() {
    if(Keyboard.keyPressed() = 80) { do pause(); }

    //move both players forward
    do computer.makeNextMove(timer);
    do computer.moveForward();

    do human.makeNextMove(timer);
    do human.moveForward();

    //check for a collision
    do checkForLoser();

    //if there wasn't a collision, mark the new positions of each player
    if(loser = 0) {
      do Screen.drawPixel(computer.xPos(), computer.yPos());
      do Screen.drawPixel(human.xPos(), human.yPos());
    }

    do Sys.wait(MIN_DELAY / gameSpeed);

    let timer = timer + 1;

    return;
  }

  method int loser() {
    return loser;
  }

  method void pause() {
    do Output.moveCursor(0, 58);
    do Output.printString("PAUSED");
    while(true) {
      do Sys.wait(MIN_DELAY / gameSpeed);
      if(Keyboard.keyPressed() = 80) {
        do Output.backSpace();
        do Output.backSpace();
        do Output.backSpace();
        do Output.backSpace();
        do Output.backSpace();
        do Output.backSpace();
        do Output.printString("      ");
        return;
      }
    }
    return;
  }

  method String getOutcome() {
    if(loser = 1) { return "You lost!"; }
    else {
      if(loser = 2) { return "You won!"; }
    }

    return "";
  }

  method void checkForLoser() {

    //if human has moved to an occupied space; return 1
    if(Game.pixelIsOccupied(human.xPos(), human.yPos())) {
      let loser = 1;
    } else {
      //if computer has moved to an occupied space; return 2
      if(Game.pixelIsOccupied(computer.xPos(), computer.yPos())) {
        let loser = 2;
      }
    }

    return;
  }

  function boolean pixelIsOccupied(int x, int y) {
    var int rowOffset, columnOffset, addressOffset;
    var int memoryValue;

    let rowOffset = y * 32;     //row number * number of addresses in each row
    let columnOffset = x / 16;  //column number / number of bits per address
    let addressOffset = x & 15; //x % 16 = x & (16 - 1) for x >= 0

    let memoryValue = Memory.peek(16384 + rowOffset + columnOffset);

    if((addressOffset = 0 ) & (memoryValue & 1 = 1)) { return true; }
    if((addressOffset = 1 ) & (memoryValue & 2 = 2)) { return true; }
    if((addressOffset = 2 ) & (memoryValue & 4 = 4)) { return true; }
    if((addressOffset = 3 ) & (memoryValue & 8 = 8)) { return true; }

    if((addressOffset = 4 ) & (memoryValue & 16 = 16)) { return true; }
    if((addressOffset = 5 ) & (memoryValue & 32 = 32)) { return true; }
    if((addressOffset = 6 ) & (memoryValue & 64 = 64)) { return true; }
    if((addressOffset = 7 ) & (memoryValue & 128 = 128)) { return true; }

    if((addressOffset = 8 ) & (memoryValue & 256 = 256)) { return true; }
    if((addressOffset = 9 ) & (memoryValue & 512 = 512)) { return true; }
    if((addressOffset = 10 ) & (memoryValue & 1024 = 1024)) { return true; }
    if((addressOffset = 11 ) & (memoryValue & 2048 = 2048)) { return true; }

    if((addressOffset = 12 ) & (memoryValue & 4096 = 4096)) { return true; }
    if((addressOffset = 13 ) & (memoryValue & 8192 = 8192)) { return true; }
    if((addressOffset = 14 ) & (memoryValue & 16384 = 16384)) { return true; }
    if((addressOffset = 15 ) & (memoryValue & (32767 + 1) = (32767 + 1))) { return true; }

    return false;
  }

}